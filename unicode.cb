#include "chub.hb"

export encode_utf8(buf@ char c uint32_t) int =
  if c <= 0x7F {
    buf[0] = c;
    return 1;
  ;

  if c <= 0x7FF {
    buf[0] = 0b11000000 | (c >> 6);
    buf[1] = 0b10000000 | (c & 0b00111111);
    return 2;
  ;

  if c <= 0xFFFF {
    buf[0] = 0b11100000 | (c >> 12);
    buf[1] = 0b10000000 | ((c >> 6) & 0b00111111);
    buf[2] = 0b10000000 | (c & 0b00111111);
    return 3;
  ;

  buf[0] = 0b11110000 | (c >> 18);
  buf[1] = 0b10000000 | ((c >> 12) & 0b00111111);
  buf[2] = 0b10000000 | ((c >> 6) & 0b00111111);
  buf[3] = 0b10000000 | (c & 0b00111111);
  return 4;
;

export decode_utf8(new_pos@@ char p@char) uint32_t =
  if p@->unsigned char < 128 {
    new_pos@ = p + 1;
    return p@->unsigned int;
  ;

  let
    start = p
    len = 0
    c = 0->uint32_t;

  if p@->unsigned char >= 0b11110000 {
    len = 4;
    c = p@ & 0b111;
  ; else if p@->unsigned char >= 0b11100000 {
    len = 3;
    c = p@ & 0b1111;
  ; else if p@->unsigned char >= 0b11000000 {
    len = 2;
    c = p@ & 0b11111;
  ; else  error_at(start "invalid UTF-8 sequence"->@char);

  for (let i int = 1; i < len; i++) {
    if p[i]->unsigned char >> 6 != 0b10
      error_at(start "invalid UTF-8 sequence"->@char);
    c = (c << 6) | (p[i] & 0b111111);
  ;

  new_pos@ = p + len;
  return c;
;

in_range(range@ uint32_t c uint32_t) bool =
  for (let i int = 0; range[i] != -1; i += 2)
    if range[i] <= c && c <= range[i + 1]
      return true->bool;
  return false->bool;
;

ii1range []uint32_t = {
  '_'->unsigned int, '_'->unsigned int, 'a'->unsigned int, 'z'->unsigned int, 'A'->unsigned int, 'Z'->unsigned int, '$'->unsigned int, '$'->unsigned int,
  0x000A8u, 0x000A8u, 0x000AAu, 0x000AAu, 0x000ADu, 0x000ADu, 0x000AFu, 0x000AFu,
  0x000B2u, 0x000B5u, 0x000B7u, 0x000BAu, 0x000BCu, 0x000BEu, 0x000C0u, 0x000D6u,
  0x000D8u, 0x000F6u, 0x000F8u, 0x000FFu, 0x00100u, 0x002FFu, 0x00370u, 0x0167Fu,
  0x01681u, 0x0180Du, 0x0180Fu, 0x01DBFu, 0x01E00u, 0x01FFFu, 0x0200Bu, 0x0200Du,
  0x0202Au, 0x0202Eu, 0x0203Fu, 0x02040u, 0x02054u, 0x02054u, 0x02060u, 0x0206Fu,
  0x02070u, 0x020CFu, 0x02100u, 0x0218Fu, 0x02460u, 0x024FFu, 0x02776u, 0x02793u,
  0x02C00u, 0x02DFFu, 0x02E80u, 0x02FFFu, 0x03004u, 0x03007u, 0x03021u, 0x0302Fu,
  0x03031u, 0x0303Fu, 0x03040u, 0x0D7FFu, 0x0F900u, 0x0FD3Du, 0x0FD40u, 0x0FDCFu,
  0x0FDF0u, 0x0FE1Fu, 0x0FE30u, 0x0FE44u, 0x0FE47u, 0x0FFFDu, 0x10000u, 0x1FFFDu,
  0x20000u, 0x2FFFDu, 0x30000u, 0x3FFFDu, 0x40000u, 0x4FFFDu, 0x50000u, 0x5FFFDu,
  0x60000u, 0x6FFFDu, 0x70000u, 0x7FFFDu, 0x80000u, 0x8FFFDu, 0x90000u, 0x9FFFDu,
  0xA0000u, 0xAFFFDu, 0xB0000u, 0xBFFFDu, 0xC0000u, 0xCFFFDu, 0xD0000u, 0xDFFFDu,
  0xE0000u, 0xEFFFDu, -1u
;;
export is_ident1(c uint32_t) bool =
  return (c!= '@' && in_range(ii1range->@unsigned int c))->bool;
;

ii2range[] uint32_t = {
  '0'->unsigned int, '9'->unsigned int, '$'->unsigned int, '$'->unsigned int, 0x0300u, 0x036Fu, 0x1DC0u, 0x1DFFu, 0x20D0u, 0x20FFu, 0xFE20u, 0xFE2Fu, -1u
;;
export is_ident2(c uint32_t) bool =
  return (c!= '@' && (is_ident1(c) || in_range(ii2range->@unsigned int c)))->bool;
;

cwrange1[] uint32_t = {
  0x00000u, 0x0001Fu, 0x0007fu, 0x000a0u, 0x00300u, 0x0036Fu, 0x00483u, 0x00486u,
  0x00488u, 0x00489u, 0x00591u, 0x005BDu, 0x005BFu, 0x005BFu, 0x005C1u, 0x005C2u,
  0x005C4u, 0x005C5u, 0x005C7u, 0x005C7u, 0x00600u, 0x00603u, 0x00610u, 0x00615u,
  0x0064Bu, 0x0065Eu, 0x00670u, 0x00670u, 0x006D6u, 0x006E4u, 0x006E7u, 0x006E8u,
  0x006EAu, 0x006EDu, 0x0070Fu, 0x0070Fu, 0x00711u, 0x00711u, 0x00730u, 0x0074Au,
  0x007A6u, 0x007B0u, 0x007EBu, 0x007F3u, 0x00901u, 0x00902u, 0x0093Cu, 0x0093Cu,
  0x00941u, 0x00948u, 0x0094Du, 0x0094Du, 0x00951u, 0x00954u, 0x00962u, 0x00963u,
  0x00981u, 0x00981u, 0x009BCu, 0x009BCu, 0x009C1u, 0x009C4u, 0x009CDu, 0x009CDu,
  0x009E2u, 0x009E3u, 0x00A01u, 0x00A02u, 0x00A3Cu, 0x00A3Cu, 0x00A41u, 0x00A42u,
  0x00A47u, 0x00A48u, 0x00A4Bu, 0x00A4Du, 0x00A70u, 0x00A71u, 0x00A81u, 0x00A82u,
  0x00ABCu, 0x00ABCu, 0x00AC1u, 0x00AC5u, 0x00AC7u, 0x00AC8u, 0x00ACDu, 0x00ACDu,
  0x00AE2u, 0x00AE3u, 0x00B01u, 0x00B01u, 0x00B3Cu, 0x00B3Cu, 0x00B3Fu, 0x00B3Fu,
  0x00B41u, 0x00B43u, 0x00B4Du, 0x00B4Du, 0x00B56u, 0x00B56u, 0x00B82u, 0x00B82u,
  0x00BC0u, 0x00BC0u, 0x00BCDu, 0x00BCDu, 0x00C3Eu, 0x00C40u, 0x00C46u, 0x00C48u,
  0x00C4Au, 0x00C4Du, 0x00C55u, 0x00C56u, 0x00CBCu, 0x00CBCu, 0x00CBFu, 0x00CBFu,
  0x00CC6u, 0x00CC6u, 0x00CCCu, 0x00CCDu, 0x00CE2u, 0x00CE3u, 0x00D41u, 0x00D43u,
  0x00D4Du, 0x00D4Du, 0x00DCAu, 0x00DCAu, 0x00DD2u, 0x00DD4u, 0x00DD6u, 0x00DD6u,
  0x00E31u, 0x00E31u, 0x00E34u, 0x00E3Au, 0x00E47u, 0x00E4Eu, 0x00EB1u, 0x00EB1u,
  0x00EB4u, 0x00EB9u, 0x00EBBu, 0x00EBCu, 0x00EC8u, 0x00ECDu, 0x00F18u, 0x00F19u,
  0x00F35u, 0x00F35u, 0x00F37u, 0x00F37u, 0x00F39u, 0x00F39u, 0x00F71u, 0x00F7Eu,
  0x00F80u, 0x00F84u, 0x00F86u, 0x00F87u, 0x00F90u, 0x00F97u, 0x00F99u, 0x00FBCu,
  0x00FC6u, 0x00FC6u, 0x0102Du, 0x01030u, 0x01032u, 0x01032u, 0x01036u, 0x01037u,
  0x01039u, 0x01039u, 0x01058u, 0x01059u, 0x01160u, 0x011FFu, 0x0135Fu, 0x0135Fu,
  0x01712u, 0x01714u, 0x01732u, 0x01734u, 0x01752u, 0x01753u, 0x01772u, 0x01773u,
  0x017B4u, 0x017B5u, 0x017B7u, 0x017BDu, 0x017C6u, 0x017C6u, 0x017C9u, 0x017D3u,
  0x017DDu, 0x017DDu, 0x0180Bu, 0x0180Du, 0x018A9u, 0x018A9u, 0x01920u, 0x01922u,
  0x01927u, 0x01928u, 0x01932u, 0x01932u, 0x01939u, 0x0193Bu, 0x01A17u, 0x01A18u,
  0x01B00u, 0x01B03u, 0x01B34u, 0x01B34u, 0x01B36u, 0x01B3Au, 0x01B3Cu, 0x01B3Cu,
  0x01B42u, 0x01B42u, 0x01B6Bu, 0x01B73u, 0x01DC0u, 0x01DCAu, 0x01DFEu, 0x01DFFu,
  0x0200Bu, 0x0200Fu, 0x0202Au, 0x0202Eu, 0x02060u, 0x02063u, 0x0206Au, 0x0206Fu,
  0x020D0u, 0x020EFu, 0x0302Au, 0x0302Fu, 0x03099u, 0x0309Au, 0x0A806u, 0x0A806u,
  0x0A80Bu, 0x0A80Bu, 0x0A825u, 0x0A826u, 0x0FB1Eu, 0x0FB1Eu, 0x0FE00u, 0x0FE0Fu,
  0x0FE20u, 0x0FE23u, 0x0FEFFu, 0x0FEFFu, 0x0FFF9u, 0x0FFFBu, 0x10A01u, 0x10A03u,
  0x10A05u, 0x10A06u, 0x10A0Cu, 0x10A0Fu, 0x10A38u, 0x10A3Au, 0x10A3Fu, 0x10A3Fu,
  0x1D167u, 0x1D169u, 0x1D173u, 0x1D182u, 0x1D185u, 0x1D18Bu, 0x1D1AAu, 0x1D1ADu,
  0x1D242u, 0x1D244u, 0xE0001u, 0xE0001u, 0xE0020u, 0xE007Fu, 0xE0100u, 0xE01EFu,
  -1u
;
cwrange2[] uint32_t = {
  0x01100u, 0x0115Fu, 0x02329u, 0x02329u, 0x0232Au, 0x0232Au, 0x02E80u, 0x0303Eu,
  0x03040u, 0x0A4CFu, 0x0AC00u, 0x0D7A3u, 0x0F900u, 0x0FAFFu, 0x0FE10u, 0x0FE19u,
  0x0FE30u, 0x0FE6Fu, 0x0FF00u, 0x0FF60u, 0x0FFE0u, 0x0FFE6u, 0x1F000u, 0x1F644u,
  0x20000u, 0x2FFFDu, 0x30000u, 0x3FFFDu,
  -1u
;;
char_width(c uint32_t) int = return
  in_range(cwrange1->@uint32_t c) ? 0 :
  in_range(cwrange2->@uint32_t c) ? 2 :
                                    1 ;
;

export display_width(p@ char len int) int =
  let
    start = p
    w = 0;
  while p - start < len {
    let c = decode_utf8(&p p);
    w += char_width(c);
  ;
  return w;
;
