ntype(x X size nat align nat kind byte) T = {
  cast T alloc sizeof Type &x.curbrk is t
  (t.s = 0)
  (t.size  = size  )
  (t.align = align )
  (t.kind = kind)
  t
}

ntypea(x X size nat align nat kind byte a T) T = {
  ntype x size align kind is t
  (t.a = a)
  t
}

export nnone (x X    ) T = ntype  x 0 0 cast byte 0
export nbyte (x X    ) T = ntype  x 1 1 cast byte 1
export nnat  (x X    ) T = ntype  x 8 8 cast byte 2
export nstct (x X    ) T = ntype  x 0 1 cast byte 3
export nptr  (x X a T) T = ntypea x 8 8 cast byte 4 a
export nfunc (x X a T) T = ntypea x 1 1 cast byte 5 a

export type_equal(t T u T) nat = {
  t then
  u then
  (t == u) else
  { (t.kind == u.kind) then
    (t.kind == 0 ) else
    (t.kind == 1 ) else
    (t.kind == 2  ) else
    (t.kind == 4  ) ? type_equal t.a u.a
      { (t.kind == 5 ) then
        t.a is p
        u.a is q
        { 1 for _
          type_equal p q then
          (p = p.s)
          (q = q.s)
          1 }
        (p == q) } }
}
