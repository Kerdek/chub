# "chub.hb"

fnv_hash(s@ i8 n i32) %i64 = return
   0xcbf29ce484222325ul is h h
:; (0 for i (i < n && (i + 1) :; (h = h * 0x100000001b3ul ^ cast %i64 s[i])) as void)
;;

rehash(a@ HashMap) =
  let n = 0 i = 0;
  for (none; i < a.capacity; i = i + 1)
    if (!!a.buckets[i].a && a.buckets[i].a != /* TOMBSTONE */ cast @i8 -1)
      (n = n + 1);

  let c = a.capacity;
  while ((n * 100) / c >= /* Low_WATERMARK */ 50)
    (c = c * 2);

  let b = new HashMap;
  (b.buckets = cast @HashEntry calloc cast %i64 c sizeof HashEntry);
  (b.capacity = c);
  let i = 0;
  for (none; i < a.capacity; i = i + 1) {
    let ent = &a.buckets[i];
    let a = &b;
    if (!!ent.a && ent.a != /* TOMBSTONE */ cast @i8 -1) hashmap_put2 a ent.a ent.n ent.val;;
  (a@ = b);;

match(e@ HashEntry a@ i8 n i32) bool =
  return !!e.a && e.a != /* TOMBSTONE */ cast @i8 -1 && e.n == n && !memcmp cast @ e.a cast @ a cast %i64 n;;
get_entry(f@ HashMap a@ i8 n i32)@ HashEntry =
  if !f.buckets return cast @HashEntry 0;
  let hash = fnv_hash a n;
  let i = 0;
  for (none; i < f.capacity; i = i + 1) {
    let ent = &f.buckets[(hash + cast %i64 i) % cast %i64 f.capacity];
    if match ent a n return ent;
    if !ent.a return cast @HashEntry 0;;
  none;;
get_or_insert_entry(f@ HashMap a@ i8 n i32 val @) =
  if !f.buckets {
    (f.buckets = (calloc /* INIT_SIZE */ 16ul sizeof HashEntry as @HashEntry));
    (f.capacity = /* INIT_SIZE */ 16ul as i32);;
  else if ((f.used * 100) / f.capacity >= /* HIGH_WATERMARK */ 70) rehash f;
  let hash = fnv_hash a n i = 0;
  for (none; i < f.capacity; i = i + 1) {
    let ent = &f.buckets[(hash + cast %i64 i) % cast %i64 f.capacity];
    if match ent a n { (ent.val = val); return;;
    if (ent.a == /* TOMBSTONE */ cast @i8 -1) {
      (ent.a = a);
      (ent.n = n);
      (ent.val = val);
      return;;
    if !ent.a {
      (ent.a = a);
      (ent.n = n);
      (ent.val = val);
      (f.used = f.used + 1);
      return;;;;;

export hashmap_get    (m @HashMap k@ i8           )@ = return hashmap_get2        m k cast i32 strlen k     ;;
export hashmap_put    (m @HashMap k@ i8       val@)  = return hashmap_put2        m k cast i32 strlen k val ;;
export hashmap_delete (m @HashMap k@ i8           )  = return hashmap_delete2     m k cast i32 strlen k     ;;
export hashmap_put2   (m @HashMap k@ i8 n i32 val@)  = return get_or_insert_entry m k n                 val ;;
export hashmap_get2   (m @HashMap k@ i8 n i32     )@ = return get_entry           m k n is e !!e ? e.val : cast @ 0;;
export hashmap_delete2(m @HashMap k@ i8 n i32     )  = return get_entry           m k n is e (e && (e.a = cast @i8 -1) as void);;