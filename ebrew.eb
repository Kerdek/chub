type FILE {};

export fread               (ptr @none m nat n nat io @FILE) nat
export fwrite              (ptr @none m nat n nat io @FILE) nat
export fputc               (c nat io @FILE) nat
export fputs               (s @byte io @FILE) nat
export malloc              (m nat) @none
export strtoul             (p @byte q @@byte b nat) nat

/* end preamble */

type
  TokenKind @()none

  Token {
    q     TokenKind
    s    @Token
    l     nat
    p    @byte
    n     nat
    t    @none
    line  nat
  }

  Type {
    size    nat
    align   nat
    offset  nat
    n       nat
    s      @Type
    o      @Type
    a      @Type
    params @Type
    name   @Token
    format @(t @Type s @byte) none
  }

  Obj {
    s         @Obj
    name      @Token
    t         @Type
    k         @Token
    is_local   nat
    isdef      nat
    is_export  nat
    params    @Obj
    body      @none
    sp         nat
  }

  Node {
    s @Node
    a @Node
    k @Token
    t @Type
    o @Obj
    l  nat
    gen @(e @Node c nat l nat) nat
  }

  Scope {
    s @Scope
    k @Token
    o @Obj
    t @Type
  }

  Ctx {
    k @Token
    s @Scope
  }

  K @Token
  O @Obj
  X @Ctx
  E @Node
  S @byte
  T @Type
  N nat
  C byte

  ftfn (t T s S) none

  tx   (x X        ) T
  ex   (x X        ) E
  exa  (x X     a E) E
  exk  (x X k K    ) E
  exka (x X k K a E) E
  necl (e E c N l N) N

  gelfn (v N) N
  geefn (e E c N l N gop @() none) N
  gegfn () none
;

ftnone ftfn ftbyte ftfn
ftnat  ftfn ftstct ftfn ftptr  ftfn
ftfunc ftfn

p2     ex p3     ex p5     ex p7     ex
pmul   ex padd   ex psh    ex pcmp   ex

ptype  tx

gelit   necl gesize  necl gederef necl geaddr  necl gecast  necl
geid    necl gelnot  necl geneg   necl gediv   necl gemod   necl geexit  necl
gee     necl gene    necl geb     necl gebe    necl gea     necl geae    necl
geadd   necl gesub   necl gemul   necl gexor   necl geass   necl gestr   necl
geshl   necl geshr   necl geelem  necl gemem   necl geseq   necl geret   necl
gecond  necl geland  necl gelor   necl geis    necl gefor   necl gecall  necl

esize  exk ecast  exk enat   exk eaddr  exk
eneg   exk elnot  exk eid    exk estr   exk ebrace exk eparen exk eexit  exk ebyte  exk

eas    exka eelem  exka ederef exka eseq   exka
eret   exka emul   exka ediv   exka emod   exka ethen  exka
eelse  exka econd  exka eadd   exka esub   exka eshl   exka
eshr   exka eb     exka ea     exka ebe    exka eae    exka
ee     exka ene    exka eland  exka ecall  exka emem   exka
elor   exka eass   exka eis    exka efor   exka

JID  () none = 0
JPCT () none = 0
JCHR () none = 0
JSTR () none = 0
JNUM () none = 0

is (c C d C) nat = (c == d)

issp (c C    ) nat = is c ' '
istb (c C    ) nat = is c '\t'
islf (c C    ) nat = is c '\n'
iscr (c C    ) nat = is c '\r'
is_  (c C    ) nat = is c '_'

isin(c C a C b C) nat = (a <= c and c <= b)

isAZ (c C    ) nat = isin c 'A' 'Z'
isaz (c C    ) nat = isin c 'a' 'z'
is09 (c C    ) nat = isin c '0' '9'
isaf (c C    ) nat = isin c 'a' 'f'

isws (c C    ) nat = {
   issp c else
   istb c else
   islf c else
   iscr c
}
is0f (c C    ) nat = {
   is09 c else
   isaf c
}
isid (c C    ) nat = {
   isAZ c else
   isaz c else
   is09 c else
   is_  c
}

memcmp2(a S b S n N) nat = {
  1 is r
  { n then n for m
    (a@ == b@) ?
      { (a = &a^1)
        (b = &b^1)
        (m - 1) }
      { (r = 0)
        0 } }
  r
}

strncmp2(a S b S n N) nat = {
  1 is r
  { n then
    n for m
    (a@ == b@) ?
      { a@ then
        (a = &a^1)
        (b = &b^1)
        (m - 1) }
      { (r = 0)
        0 } }
  r
}

strcmp2(a S b S) nat = {
  1 is r
  { 1 for _
    (a@ == b@) ?
      { a@ then
        (a = &a^1)
        (b = &b^1)
        1 }
      { (r = 0)
        0 } }
  r
}

sw1(p S a C    ) nat = {(p^0 == a) then 1}
sw2(p S a C b C) nat = {(p^0 == a) then (p^1 == b) then 2}

read_punct(p S) N = {
  sw2 p '=' '=' else
  sw2 p '!' '=' else
  sw2 p '<' '=' else
  sw2 p '>' '=' else
  sw2 p '<' '<' else
  sw2 p '>' '>' else
  sw2 p '/' '/' else
  sw1 p '='     else
  sw1 p '<'     else
  sw1 p '>'     else
  sw1 p '+'     else
  sw1 p '-'     else
  sw1 p '*'     else
  sw1 p '/'     else
  sw1 p '&'     else
  sw1 p '|'     else
  sw1 p '@'     else
  sw1 p '#'     else
  sw1 p '{'     else
  sw1 p '}'     else
  sw1 p '('     else
  sw1 p ')'     else
  sw1 p '['     else
  sw1 p ']'     else
  sw1 p '!'     else
  sw1 p '?'     else
  sw1 p ':'     else
  sw1 p ';'     else
  sw1 p ','     else
  sw1 p '.'     else
  sw1 p '~'     else
  sw1 p '^'     else
  sw1 p '$'     else
  sw1 p '`'     else
  sw1 p '%'
}

export stdout () none
export stderr () none
export stdin  () none

gc (c C) none = fputc cast N c (cast @@FILE &stdout)@
gs (s S) none = fputs s (cast @@FILE &stdout)@
gsn(s S n N) none = fwrite cast @none s 1 n (cast @@FILE &stdout)@
glf() none = gc '\n'
gn1(n N) none = { n then gn1  (n / 10) gc  cast byte ('0' + n % 10) }
gn (n N) none = { n ? (gn1  n) (gc  '0') }

oc (c C) none = fputc cast N c (cast @@FILE &stderr)@
os (s S) none = fputs s (cast @@FILE &stderr)@
olf(   ) none = oc '\n'
on1(n N) none = { n then on1 (n / 10) oc cast byte ('0' + n % 10) }
on (n N) none = { n ? on1 n  oc '0' }

align(n N a N) N = ((n + a - 1) / a * a)

diag(s S) none = { os s olf exit 1 }
type_equal(t T u T) nat = {
  !t else
  !u else
  t.format is c
  (t == u) else
  !!t.o ? type_equal t.o u
  !!u.o ? type_equal t u.o
  (c == u.format) then
  (c == &ftnone ) else
  (c == &ftbyte ) else
  (c == &ftnat  ) else
  (c == &ftptr  ) ? type_equal t.a u.a
    { (c == &ftfunc ) then
      type_equal t.a u.a then
      u.a.s is p
      t.a.s is q
      { 1 for _
        !!p then
        !!q then
        type_equal p q then
        (p = p.s)
        (q = q.s)
        1 }
      (p == q) }
}

ntype(size N align N format @(t T s S) none) T = {
  cast T malloc sizeof Type is t
  (t.size  = size  )
  (t.align = align )
  (t.format = format)
  t
}

ntypea(size N align N format @(t T s S) none a T) T = {
  ntype size align format is t
  (t.a = a)
  t
}

nnone (   ) T = ntype  0 0 &ftnone
nbyte (   ) T = ntype  1 1 &ftbyte
nnat  (   ) T = ntype  8 8 &ftnat
nstct (   ) T = ntype  0 1 &ftstct
nptr  (a T) T = ntypea 8 8 &ftptr  a
nfunc (a T) T = ntypea 1 1 &ftfunc a

tree(k K t T gen @necl) E = {
  cast E malloc sizeof Node is e
  (e.k = k)
  (e.t = t)
  (e.gen = gen)
  e
}

t0  (k K t T gen @necl             ) E = {tree k t gen}
t1  (k K t T gen @necl  a E        ) E = {tree k t gen is e e ret (e.a   = a)}
t2  (k K t T gen @necl  a E b E    ) E = {tree k t gen is e e ret (e.a   = a)  (e.a.s = b)}
t3  (k K t T gen @necl  a E b E c E) E = {tree k t gen is e e ret (e.a   = a)  (e.a.s = b)  (e.a.s.s = c)}
tt  (k K t T gen @necl  u T        ) E = {t0   k t gen is e e ret (e.t.s = u)}
to  (k K t T gen @necl  o O        ) E = {t0   k t gen is e e ret (e.o   = o)}
tl  (k K t T gen @necl  l N        ) E = {t0   k t gen is e e ret (e.l   = l)}

ntoken(q TokenKind a S b S line N) K = {
  cast K malloc sizeof Token is k
  (k.q    = q    )
  (k.p    = a    )
  (k.n    = b - a)
  (k.line = line )
  k
}

read_file() S = {
  (1 << 20) is big
  cast @byte malloc big is buf
  fread cast @none buf 1 big (cast @@FILE &stdin)@
  buf
}

push_scope  (x X) @Scope = {
  cast @Scope malloc sizeof Scope is s
  (s.s = x.s)
  (s.k = x.k)
  (s.o = 0)
  (s.t = 0)
  (x.s = s)
  s
}

try_search_scope(x X c S n N) @Scope = {
  cast @Scope 0 is r
  { !!x.s then
    x.s for s
    (n != s.k.n or !strncmp2 s.k.p c n) ?
      s.s
      { (r = s)
        cast @Scope 0 } }
  r
}

search_scope(x X c S n N) @Scope = {
  try_search_scope x c n else
  diag "lookup failed"
}

nvar (x X t T) O = {
  cast O malloc sizeof Obj is o
  (o.name  = x.k)
  (o.t     = t  )
  (o.isdef = 0  )
  o
}

nletvar (x X t T) O = {
  nvar x t is o
  (o.is_local = 1)
  ((push_scope x).o = o) 
  o
}

nlvar (x X t T o_prev @O) O = {
  nvar x t is o
  (o.is_local = 1)
  (o.s = o_prev@)
  (o_prev@ = o)
  ((push_scope x).o = o) 
  o
}

ngvar (x X t T) O = {
  nvar x t is o
  (o.is_local = 0)
  ((push_scope x).o = o) 
  o
}

jadv   (x X    ) K    = { x.k ret (x.k = x.k.s) }
jeq    (x X c S) nat  = { !!x.k then memcmp2 x.k.p c x.k.n then !c^x.k.n }
expect (x X c S) none = { { !jeq x c then diag "unexpected" } jadv x }
consume(x X c S) nat  = { jeq x c is r { r then jadv x } r }

declarator (x X t @T) none = {
  (t@ = cast T malloc sizeof Type)
  jadv x is k
  ptype x is u
  (t@@ = u@)
  (t.o = u)
  (t.name = k)
}

struct_decl tx = {
  nstct is t
  &t.a is u
  { 1 for _ 
     !consume x "}" then
      declarator x u
      (u = &u.s) }
  0 is bits
  { !!t.a then
    t.a for g
    (bits = align bits (g.align * 8))
    (g.offset = bits / 8)
    (bits = bits + g.size * 8)
    {(t.align < g.align) then (t.align = g.align)}
    g.s }
  (t.size = align bits (t.align * 8) / 8)
  t
}

func_params tx = {
  cast T 0 is params
  &params is u
  { 1 for _
    !jeq x ")" then
    !jeq x "}" then
    declarator x u
    (u = &u.s)
    1 }
  jadv x
  nfunc ptype x is t
  (t.params = params)
  t
}

ptype tx = (
  consume x "none"   ? nnone
  consume x "byte"   ? nbyte
  consume x "nat"    ? nnat
  consume x "@"      ? nptr        ptype x
  consume x "("      ? func_params       x
  consume x "{"      ? struct_decl       x
  { search_scope x x.k.p x.k.n is s
    jadv x
    s.t }
)

pj(x X     q TokenKind e @exk ) E = {(x.k.q == q) then jadv x is k e@ x k}
pl(x X     c S         e @exk ) E = {jeq x c then jadv x is k e@ x k  }
pr(x X a E c S         e @exka) E = {jeq x c then jadv x is k e@ x k a}
pu(x X a E c S         e @exka) E = (consume x c ? a e@ x x.k a)


pa1    ex  = { pj    x   &JID   &eid   else
               pj    x   &JSTR  &estr  else
               pj    x   &JNUM  &enat  else
               pj    x   &JCHR  &ebyte      }
pa3    exa = { (a.t.format == &ftfunc) then ecall x x.k a }
pa4    exa = { pr    x a "?"    &econd      }
pa5    exa = { pr    x a "ret"  &eret  else
               pr    x a "is"   &eis   else
               pr    x a "for"  &efor  else
               pr    x a "then" &ethen else
               pr    x a "else" &eelse else
               pu    x a "}"    &eseq       }
pamul  exa = { pr    x a "*"    &emul  else
               pr    x a "/"    &ediv  else
               pr    x a "%"    &emod       }
paadd  exa = { pr    x a "+"    &eadd  else
               pr    x a "-"    &esub       }
pash   exa = { pr    x a "<<"   &eshl  else
               pr    x a ">>"   &eshr       }
pacmp  exa = { pr    x a "<"    &eb    else
               pr    x a ">"    &ea    else
               pr    x a "<="   &ebe   else
               pr    x a ">="   &eae   else
               pr    x a "=="   &ee    else
               pr    x a "!="   &ene        }
paland exa = { pr    x a "and"  &eland      }
palor  exa = { pr    x a "or"   &elor       }
pa7    exa = { pr    x a "as"   &eas        }

p2 ex = {
  pl x "&"      &eaddr else
  pl x "-"      &eneg  else
  pl x "!"      &elnot else
  pl x "not"    &elnot else
  pl x "cast"   &ecast else
  pl x "sizeof" &esize else
  pl x "exit"   &eexit else
  { consume x "(" ?
      { { p7    x for a
          pr    x a "=" &eass else
          pa7   x a
        } ret
        expect x ")"                     }
    pl  x "{"  &ebrace else
    pa1 x else
    diag "expected an expression"
  } for a
  pr    x     a "^"       &eelem   else
  pr    x     a "."       &emem   else
  pr    x     a "@"       &ederef
}

p3    ex = { p2    x for a pa3    x a }
p4    ex = { p3    x for a pa4    x a }
p5    ex = { p4    x is  a pa5    x a }
pmul  ex = { p4    x for a pamul  x a }
padd  ex = { pmul  x for a paadd  x a }
psh   ex = { padd  x for a pash   x a }
pcmp  ex = { psh   x for a pacmp  x a }
pland ex = { pcmp  x for a paland x a }
plor  ex = { pland x for a palor  x a }
p7    ex = { plor  x for a pa7    x a }

typedecl(x X) K = {
  x.k for k
  !consume x ";" then
  push_scope x is s
  declarator x &s.t
  x.k
}

create_lvars(x X t T o_prev @O) none = {
  !!t then
  create_lvars x t.s o_prev
  x.k is k
  (x.k = t.name)
  nlvar x t o_prev
  (x.k = k)
}

argreg1(d N) S = {
  (d == 0) ? "dil"
  (d == 1) ? "sil"
  (d == 2) ? "dl"
  (d == 3) ? "cl"
  (d == 4) ? "r8b"
             "r9b"
}

argreg8(d N) S = {
  (d == 0) ? "rdi"
  (d == 1) ? "rsi"
  (d == 2) ? "rdx"
  (d == 3) ? "rcx"
  (d == 4) ? "r8"
             "r9"
}

gtreg(s S        ) none = { gc  '%' gs  s }
gt0  (s S        ) none = { gs  s glf  }
gt1  (s S a S    ) none = { gs  s gc  ' ' gtreg  a glf  }
gt2  (s S a S b S) none = { gs  s gc  ' ' gtreg  a gc  ',' gtreg  b glf  }

gtz (a S) none = gt2  "xor"  a a
gtcz(a S) none = gt2  "test" a a

gtlit(l N a S) none = (!!l ? { gs "mov $" gn l gs ",%rax" glf } gtz  "eax")

gtnot(    a S) none = gt1 "not" a
gtneg(    a S) none = gt1 "neg" a
gmul (    a S) none = gt1 "mul" a
gdiv (       ) none = { gtz  "edx" gt1 "div" "rdi" }
gmod (       ) none = { gdiv
                        gs "mov %rdx,%rax" glf }
gshx (x C    ) none = { gs "mov %dil,%cl" glf
                        gs "sh" gc x gs " %cl,%rax" glf }

gadd (a S b S) none = gt2 "add" a b
gsub (a S b S) none = gt2 "sub" a b
gand (a S b S) none = gt2 "and" a b
gor  (a S b S) none = gt2 "or"  a b
gxor (a S b S) none = gt2 "xor" a b
gcmp (a S b S) none = gt2 "cmp" a b
gshr () none = gshx 'r'
gshl () none = gshx 'l'

gpromote(b S) none = (gt2 "movzbl" "al" b)

gsetf     (s S     b S    ) none = { gs "set" gs s gc ' ' gtreg "al" glf gpromote b }
gcmp_setf (s S a S b S c S) none = { gcmp a b gsetf s c }
gcmpz_setf(s S a S b S    ) none = { gtcz a   gsetf s b }
glnot     (    a S b S    ) none = { gcmpz_setf "e" a b }

gj        (e E l S    ) none = { gs "jmp " gs l gn cast nat e gc '$' glf }
gjc       (e E l S s S) none = { gs "j" gs s gc ' ' gs l gn cast nat e gc '$' glf }
glabel    (e E l S    ) none = { gs l gn cast nat e gs "$:" glf }

gje  (e E l S) none = gjc e l "e"
gjne (e E l S) none = gjc e l "ne"
gjb  (e E l S) none = gjc e l "b"
gjbe (e E l S) none = gjc e l "be"
gja  (e E l S) none = gjc e l "a"
gjae (e E l S) none = gjc e l "ae"

gegcmp(s S) none = gcmp_setf s "rdi" "rax" "eax"

ge  () none = gegcmp "e"
gne () none = gegcmp "ne"
gb  () none = gegcmp "b"
gbe () none = gegcmp "be"
ga  () none = gegcmp "a"
gae () none = gegcmp "ae"

gcast(a T b T) none = (
  (b.format == &ftnone) ?  gtz     "eax"
  { (b.format == &ftbyte) then
    gpromote  "eax" }
)

gfpush(c @N  l N ) none = { !!l then gs "sub $" gn (l << 3) gc ',' gtreg "rsp" glf (c@ = c@ + l) }
gfpop (c @N  l N ) none = { !!l then gs "add $" gn (l << 3) gc ',' gtreg "rsp" glf (c@ = c@ - l) }
gpush (c @N  d S ) none = { gt1 "push" d (c@ = c@ + 1) }
gpop  (c @N  s S ) none = { gt1 "pop"  s (c@ = c@ - 1) }

gindex(      l N ) none = { !!l then gs  "add $" gn  l gc  ',' gtreg  "rax" glf  }

gaddr(q @ftfn n N s S d S) none = {(!strcmp2 s d or n) then gs  "lea " gn  n gs  "(%r" gs  s gs  "),%r" gs  d glf }
gload(q @ftfn n N s S d S) none = (
  (q == &ftstct or q == &ftfunc) ?
    gaddr  q n s d 
  (q == &ftbyte) ?
    {gs  "movzbl " gn  n gs  "(%r" gs  s gs  "),%e" gs  d glf }
  {gs  "mov " gn  n gs  "(%r" gs  s gs  "),%r" gs  d glf }
)

gaddrg(e E c @N d S) none = { gs "mov " gsn e.o.name.p e.o.name.n gs "@GOTPCREL(%rip),%r" gs d glf }
gaddrl(e E c @N d S) none = { gaddr e.o.t.format (c@ - e.o.sp << 3) "sp" d }
gloadl(e E c @N d S) none = { gload e.o.t.format (c@ - e.o.sp << 3) "sp" d }

gloadsp(q @ftfn d S) none = (
  (q == &ftstct) ?
    { gs  "mov %rsp,%" gs  d glf }
  (q == &ftbyte) ?
    { gs  "movzbq (%rsp), %" gs  d glf }
  { gs  "mov (%rsp),%" gs  d glf }
)

gstoresp(t T) none = {
  (t.format == &ftbyte) ?
    {gs "mov %al,(%rsp)" glf }
  {gs "mov %rax,(%rsp)" glf }
}

gstore(t T c @N) none = {
  gpop c "rdi"
  (t.format == &ftstct) ?
    { 0 for i
      (i < t.size) then
      (i + 1) ret
      gs "mov " gn i gs "(%rax),%r8b" glf
      gs "mov %r8b," gn i gs "(%rdi)" glf }
  (t.format == &ftbyte) ?
    { gs "mov %al,(%rdi)"  glf }
    { gs "mov %rax,(%rdi)" glf }
}

gexpr necl  = e.gen@  e c l

gdrop (e E c N    ) none = { cast none gexpr  e c 0 }
geval (e E c N l N) none = {
  gexpr e c l is l1
  !!l1 then
  l1 for l2
  gload ((l2 == 1 and l == 0) ? e.t.format &ftptr) 0 "ax" "ax"
  (l2 - 1)
}

glet(e E c N l N d S gen @necl) N = {
  geval e.a c 0
  gfpush &c 1
  (e.o.sp = c)
  gstoresp e.o.t
  gen@ e c l ret
  gloadsp e.o.t.format d
  gfpop &c 1
}

gtpars(e E o O c N g N) N = {
  !o ? { gdrop e c 0 }
    { (o.sp = -g)
      gtpars e o.s c (g + 1) }
}
gtparr(e E o O c N g N) N = {
  !o ? { gdrop e c 0 }
    { gpush &c argreg8 g
      (o.sp = c)
      (((g == 5) ? &gtpars &gtparr)@ e o.s c (g + 1) + 1) }
}
function(x X) none = {
  consume x "export" is is_export
  cast T 0 is t
  declarator x &t
  {
    try_search_scope x t.name.p t.name.n is s
    (!!s and !!s.o and (s.o.t.format == &ftfunc) and s.o)
  } is o
  ( !!o ?
    { (o.t.format != &ftfunc and diag "redeclared as a different type of symbol")
      (o.isdef and jeq x "=" and diag "redefinition")
      (o.is_export != is_export and diag "mismatched visibility") }
    { x.k is k
      (x.k = t.name)
      (o = ngvar x t)
      (x.k = k)
      (o.is_export = is_export) } )
  not consume x "=" ?
    (o.isdef = 0)
    { (o.isdef = 1)
      x.s is s
      create_lvars x t.params &o.params
      gs ".section .text." gsn o.name.p o.name.n glf
      { o.is_export then gs ".globl" gc ' ' gsn o.name.p o.name.n glf }
      gsn o.name.p o.name.n gc ':' glf
      0 is c
      (o.body = cast @none p4 x)
      gfpop &c gtparr cast E o.body o.params c 0
      gt0 "ret"
      (x.s = s) }
}

ecall exka = {
  a.t.params is u
  { a for b
    !!u then
    (b.s = p3 x)
    { !type_equal b.s.t u then diag "asymmetric argument" }
    (u = u.s)
    b.s }
  t1 x.k a.t.a &gecall a
}
gargs(e E c @N) none = {
  !!e then
  gargs e.s c
  geval e c@ 0
  gpush c "rax"
}
gecall necl  = {
  gargs e.a.s &c
  geval e.a    c 0
  0 is d
  { !!e.a.s then
    e.a.s for e (d < 6) then e.s ret
    gpop &c argreg8 d
    (d = d + 1) }
  gs "call *%rax" glf
  0
}

export main(argc N argv @S) N = {
  cast @byte 0 is c
  gt0 ".data"
  read_file is p
  (c = p)
  cast K 0 is k
  1 is n
  &k is x
  { 1 for _
    p@ then
    ( p^0 == '/' and p^1 == '*') ? {
      p is q
      { &p^2 for r
        r@ then
        ( r^0 != '*' or r^1 != '/' ) ?
          &r^1
          { (p = &r^2) cast S 0} }
      (p == q and diag "unclosed block comment") }
    isws p@ ?
      (p = &p^1)
    { is09 p@ ? {
      { &p^1 for q isid q@ then &q^1 } is q
      (x@ = ntoken &JNUM p q n)
      (x.l = strtoul x.p &x.p 10)
    (p = q) }
  (p@ == '"') ? {
      { &p^1 for q
        (q@ == '\\') ?
        { (q^2 or diag "unclosed string literal")
          &q^2 }
        { (q^1 or diag "unclosed string literal")
          (q@ != '"') then
          &q^1 }
      } is end
      ntoken &JSTR p &end^1 n is k
      gs ".s" gn cast nat k gc ':' gs ".string \""
      { &k.p^1 for i (i < &k.p^(k.n - 1)) then gc i@ &i^1 }
      gc '\"' glf
    (x@ = k)
    (p = &p^x.n) }
  (p@ == '\'') ?
    { &p^1 is q
      (q@ == '\0' and diag "unclosed literal byte")
      (q@ == '\\') ?
        { (q = &q^1)
          (q@ == '\0' and diag "unclosed literal byte")
          (q@ == 'a' ) ?'\a'
            (q@ == 'b' ) ?'\b'
            (q@ == 'f' ) ?'\f'
            (q@ == 'n' ) ?'\n'
            (q@ == 'r' ) ?'\r'
            (q@ == 't' ) ?'\t'
            (q@ == 'v' ) ?'\v'
            (q@ == '\'') ? '\''
            (q@ == '\"') ? '\"'
            (q@ == '\\') ? '\\'
              { '\0' ret
              (q@ != '0' and diag "invalid escape sequence") } }
    q@ is l
    (q = &q^1)
    (q@ != '\'' and diag "unclosed byte literal")
    ntoken &JCHR p &q^1 n is k
    (k.l = cast N l)
    (x@ = k)
    (p = &p^x.n) }
    { 0 is n
      { p for q { { isid q@ then &q^1 } else cast S 0 ret (n = q - p as N) } }
      !!n ?
          { (x@ = ntoken &JID p &p^n n)
            (p = &p^x.n) }
        { read_punct p is n
          !!n ?
              { (x@ = ntoken &JPCT p &p^n n)
                (p = &p^x.n) }
              diag "invalid token" } }
    (x = &x.s) } }
  cast @Ctx malloc sizeof Ctx is x
  (x.k = k)
  (x.s = 0)
  { !!x.k then
    x.k for k
    ( consume x "type" ? &typedecl &function)@ x
    x.k }
  0
}

ge0     gelfn = {
  gtlit   v "rax"
  0
}

ge1     geefn = {
  geval  e.a c 0
  gop@
  0
}

ge2     geefn = {
  geval  e.a.s  c 0
  gpush        &c "rax"
  geval  e.a    c 0
  gpop         &c "rdi"
  gop@
  0
}

gegneg  gegfn = gtneg  "rax"
geglnot gegfn = glnot  "rax" "eax"
gegadd  gegfn = gadd   "rdi" "rax"
gegsub  gegfn = gsub   "rdi" "rax"
gegmul  gegfn = gmul   "rdi"
gegdiv  gegfn = gdiv
gegmod  gegfn = gmod
gegshr  gegfn = gshr
gegshl  gegfn = gshl
gege    gegfn = ge
gegne   gegfn = gne
gegb    gegfn = gb
gegbe   gegfn = gbe
gega    gegfn = ga
gegae   gegfn = gae

ebrace  exk  = p5 x
eparen  exk  = p7 x

enat    exk   = tl k nnat  &gelit k.l
ebyte   exk   = tl k nbyte &gelit k.l
gelit   necl  = ge0 e.l

esize   exk   = tt k nnat &gesize ptype x
gesize  necl  = ge0 e.t.s.size

ederef  exka  = t1 k a.t.a &gederef a
gederef necl  = (gexpr e.a c 0 + 1 - l)

eaddr   exk   = {
  p2 x is a
  t1 k nptr a.t &geaddr a
}
geaddr  necl  = gexpr e.a c 1

eas     exka  = t1 k ptype x &gecast a
ecast   exk   = {
  ptype x is u
  t1 k u &gecast
  p4 x
}
gecast  necl  = {
  geval  e.a c 0
  gcast  e.a.t e.t
  0
}

estr   exk  = t0 k nptr nbyte &gestr
gestr necl  = {
  gs "mov .s" gn cast nat e.k gs "@GOTPCREL(%rip),%rax" glf
  0
}
eid    exk  = { (search_scope x k.p k.n).o is o to k o.t &geid o }
geid   necl  = {
  (e.o.is_local ? !l ? &gloadl &gaddrl &gaddrg)@ e &c "ax"
  0
}

elnot exk  = t1 k nnat &gelnot   p3    x gelnot necl  = ge1 e c l &geglnot
eneg  exk  = t1 k nnat &geneg    p3    x geneg  necl  = ge1 e c l &gegneg
ediv  exka = t2 k nnat &gediv  a p4    x gediv  necl  = ge2 e c l &gegdiv
emod  exka = t2 k nnat &gemod  a p4    x gemod  necl  = ge2 e c l &gegmod
ee    exka = t2 k nnat &gee    a psh   x gee    necl  = ge2 e c l &gege
ene   exka = t2 k nnat &gene   a psh   x gene   necl  = ge2 e c l &gegne
eae   exka = t2 k nnat &geae   a psh   x geae   necl  = ge2 e c l &gegae
ea    exka = t2 k nnat &gea    a psh   x gea    necl  = ge2 e c l &gega
eb    exka = t2 k nnat &geb    a psh   x geb    necl  = ge2 e c l &gegb
ebe   exka = t2 k nnat &gebe   a psh   x gebe   necl  = ge2 e c l &gegbe
eadd  exka = t2 k nnat &geadd  a pmul  x geadd  necl  = ge2 e c l &gegadd
esub  exka = t2 k nnat &gesub  a pmul  x gesub  necl  = ge2 e c l &gegsub
emul  exka = t2 k nnat &gemul  a p4    x gemul  necl  = ge2 e c l &gegmul
eshl  exka = t2 k nnat &geshl  a padd  x geshl  necl  = ge2 e c l &gegshl
eshr  exka = t2 k nnat &geshr  a padd  x geshr  necl  = ge2 e c l &gegshr

eelem  exka = t2 k a.t.a &geelem a p3 x
geelem necl   = {
  geval  e.a    c 0
  gpush        &c "rax"
  geval  e.a.s  c 0
  gpop         &c "rdx"
  gs  "lea (%rdx,%rax," gn  e.a.t.a.size gs  "),%rax" glf 
  (1 - l)
}

emem  exka  = {
  jadv x
  { a.t for t (t.format == &ftptr) then t.a } is t
  (t.format != &ftstct and diag "not a struct")
  cast T 0 is g
  { t.a for a
    { (a.name.n == k.s.n) then strncmp2 a.name.p k.s.p k.s.n }
    ? { (g = a) cast T 0 }
      a.s }
  { !g then diag "no such member" }
  t1 k.s g &gemem a
}
gemem   necl  = {
  geval  e.a c 0
  { e.a.t for t
    (t.format == &ftptr) then
    t.a ret
    gload  t.a.format 0 "ax" "ax" }
  gindex  e.t.offset
  (1 - l)
}

eseq   exka  = {
  p5 x is b
  t2 k b.t &geseq a b
}
geseq  necl  = {
  gdrop  e.a   c
  geval  e.a.s c l
  0
}

eret  exka  = t2 k a.t &geret a p5 x
geret necl  = {
  geval  e.a    c l
  gpush        &c "rax"
  gdrop  e.a.s  c
  gpop         &c "rax"
  0
}

econd  exka = {
  p4 x is b
  t3 k b.t &gecond a b
  p4 x
}
gecond necl   = {
  geval   e.a     c 0
  gtcz              "eax"
  gje     e         "a"
  geval   e.a.s   c l
  gj      e         "b"
  glabel  e         "a"
  geval   e.a.s.s c l
  glabel  e         "b"
  0
}

ethen  exka  = {
  p5 x is b
  t2 k b.t &geland a b
}
eland  exka  = {
  pcmp x is b
  t2 k b.t &geland a b
}
geland necl  = {
  (e.a.s.t.format == &ftnone) is keep
  geval  e.a c 0
  gtcz  "eax"
  gje    e         "a"
  { keep then
    gpush        &c "rax" }
  geval  e.a.s c 0
  { keep then
    gpop         &c "rax" }
  glabel  e        "a"
  0
}

eelse  exka  = t2 k a.t &gelor a p5    x
elor   exka  = t2 k a.t &gelor a pland x
gelor  necl  = {
  (e.a.s.t.format == &ftnone) is keep
  geval    e.a   c 0
  gtcz    "eax"
  gjne     e       "a"
  { keep then
    gpush        &c "rax" }
  geval    e.a.s c 0
  { keep then
    gpop         &c "rax" }
  glabel   e       "a"
  0
}

eis    exka = {
  x.s is s
  nletvar x a.t is o
  jadv x p5 x is b
  t2 k b.t &geis a b is e
  (e.o = o)
  (x.s = s)
  e
}
geisa  necl = {
  geval   e.a.s  c l
  0
}
geis   necl = glet e c l "rdx" &geisa

efor   exka = {
  x.s is s
  nletvar x a.t is o
  jadv x
  p5 x is b
  t2 k b.t &gefor a b is e
  (e.o = o)
  (x.s = s)
  e
}
gefora necl = {
  gj        e        "b"
  glabel    e        "a"
  gstoresp  e.a.t
  glabel    e        "b"
  geval     e.a.s  c 0
  gtcz               "eax"
  gjne      e        "a"
  0
}
gefor  necl = glet e c l "rax" &gefora

eass   exka  = t2 k nnone &geass a p7 x
geass  necl  = {
  geval   e.a    c 1
  gpush         &c "rax"
  geval   e.a.s  c 0
  gstore  e.a.t &c
  gtz             "eax"
  0
}

eexit  exk  = t1 k nnone &geexit p3 x
geexit necl = {
  geval e.a c 0
  gt2 "mov" "rax" "rdi"
  gtlit 60 "rax"
  gt0 "syscall"
}

ftnone ftfn = 0
ftbyte ftfn = 0
ftnat  ftfn = 0
ftstct ftfn = 0
ftptr  ftfn = 0
ftfunc ftfn = 0