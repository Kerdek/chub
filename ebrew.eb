export malloc  (m nat) @none
export strtoul (p @byte q @@byte b nat) nat

/* end preamble */

type
  TokenKind @()none

  Token {
    q     TokenKind
    s    @Token
    l     nat
    p    @byte
    n     nat
    t    @none
    line  nat
    col   nat
  }

  Type {
    size    nat
    align   nat
    offset  nat
    n       nat
    s      @Type
    o      @Type
    a      @Type
    params @Type
    name   @Token
    format @(t @Type s @byte) none
  }

  Node {
    s @Node
    a @Node
    k @Token
    t @Type
    u @Type
    sp nat
    l  nat
    gen @(e @Node c nat l nat) nat
  }

  Scope {
    s @Scope
    k @Token
    t @Type
    e @Node
    is_type  nat
    is_def   nat
  }

  Ctx {
    k @Token
    s @Scope
  }

  K @Token
  X @Ctx
  E @Node
  S @byte
  T @Type
  N nat
  C byte

  ftfn (t T s S) none

  tx   (x X        ) T
  ex   (x X        ) E
  exa  (x X     a E) E
  exk  (x X k K    ) E
  exka (x X k K a E) E
  necl (e E c N l N) N

  gelfn (v N) N
  geefn (e E c N l N gop @() none) N
  gegfn () none
;

ftnone ftfn ftbyte ftfn
ftnat  ftfn ftstct ftfn ftptr  ftfn
ftfunc ftfn

p2     ex p3     ex p5     ex p7     ex
pmul   ex padd   ex psh    ex pcmp   ex

ptype  tx

gelit   necl gesize  necl gederef necl geaddr  necl gecast  necl geread  necl gewrite  necl geerr  necl
geid    necl gelnot  necl geneg   necl gediv   necl gemod   necl geexit  necl gescratch necl
gee     necl gene    necl geb     necl gebe    necl gea     necl geae    necl
geadd   necl gesub   necl gemul   necl gexor   necl geass   necl gestr   necl
geshl   necl geshr   necl geelem  necl gemem   necl geseq   necl geret   necl
gecond  necl geland  necl gelor   necl geis    necl gefor   necl gecall  necl

esize  exk ecast  exk enat   exk eaddr  exk escratch exk
eneg   exk elnot  exk eid    exk estr   exk ebrace exk eparen exk eexit  exk ebyte  exk eread exk ewrite exk eerr exk

eas    exka eelem  exka ederef exka eseq   exka
eret   exka emul   exka ediv   exka emod   exka ethen  exka
eelse  exka econd  exka eadd   exka esub   exka eshl   exka
eshr   exka eb     exka ea     exka ebe    exka eae    exka
ee     exka ene    exka eland  exka ecall  exka emem   exka
elor   exka eass   exka eis    exka efor   exka

JID  () none = 0
JPCT () none = 0
JCHR () none = 0
JSTR () none = 0
JNUM () none = 0

isc (c C d C) nat = (c == d)

issp (c C    ) nat = isc c ' '
istb (c C    ) nat = isc c '\t'
islf (c C    ) nat = isc c '\n'
iscr (c C    ) nat = isc c '\r'
is_  (c C    ) nat = isc c '_'

isin(c C a C b C) nat = (a <= c and c <= b)

isAZ (c C    ) nat = isin c 'A' 'Z'
isaz (c C    ) nat = isin c 'a' 'z'
is09 (c C    ) nat = isin c '0' '9'
isaf (c C    ) nat = isin c 'a' 'f'

isws (c C    ) nat = {
   issp c else
   istb c else
   islf c else
   iscr c
}
is0f (c C    ) nat = {
   is09 c else
   isaf c
}
isid (c C    ) nat = {
   isAZ c else
   isaz c else
   is09 c else
   is_  c
}

memcmp2(a S b S n N) nat = {
  1 is r
  { n then n for m
    (a@ == b@) ?
      { (a = &a^1)
        (b = &b^1)
        (m - 1) }
      { (r = 0)
        0 } }
  r
}

strncmp2(a S b S n N) nat = {
  1 is r
  { n then
    n for m
    (a@ == b@) ?
      { a@ then
        (a = &a^1)
        (b = &b^1)
        (m - 1) }
      { (r = 0)
        0 } }
  r
}

strcmp2(a S b S) nat = {
  1 is r
  { 1 for _
    (a@ == b@) ?
      { a@ then
        (a = &a^1)
        (b = &b^1)
        1 }
      { (r = 0)
        0 } }
  r
}

sw1(p S a C    ) nat = {(p^0 == a) then 1}
sw2(p S a C b C) nat = {(p^0 == a) then (p^1 == b) then 2}

read_punct(p S) N = {
  sw2 p '=' '=' else
  sw2 p '!' '=' else
  sw2 p '<' '=' else
  sw2 p '>' '=' else
  sw2 p '<' '<' else
  sw2 p '>' '>' else
  sw2 p '/' '/' else
  sw1 p '='     else
  sw1 p '<'     else
  sw1 p '>'     else
  sw1 p '+'     else
  sw1 p '-'     else
  sw1 p '*'     else
  sw1 p '/'     else
  sw1 p '&'     else
  sw1 p '|'     else
  sw1 p '@'     else
  sw1 p '#'     else
  sw1 p '{'     else
  sw1 p '}'     else
  sw1 p '('     else
  sw1 p ')'     else
  sw1 p '['     else
  sw1 p ']'     else
  sw1 p '!'     else
  sw1 p '?'     else
  sw1 p ':'     else
  sw1 p ';'     else
  sw1 p ','     else
  sw1 p '.'     else
  sw1 p '~'     else
  sw1 p '^'     else
  sw1 p '$'     else
  sw1 p '`'     else
  sw1 p '%'
}

export stdout () none
export stderr () none
export stdin  () none

strlen2(a S) N = {
  0 for i a^i then (i + 1)
}

gc (c C) none = write &c 1
gs (s S) none = write s strlen2 s
gsn(s S n N) none = write s n
glf() none = gc '\n'
gn1(n N) none = { n then gn1 (n / 10) gc cast byte ('0' + n % 10) }
gn (n N) none = { n ? (gn1  n) (gc  '0') }

oc (c C) none = err &c 1
os (s S) none = err s strlen2 s
osn(s S n N) none = err s n
olf(   ) none = oc '\n'
on1(n N) none = { n then on1 (n / 10) oc cast byte ('0' + n % 10) }
on (n N) none = { n ? on1 n  oc '0' }

align(n N a N) N = ((n + a - 1) / a * a)

diag (line N col N s S) none = { oc '(' on line oc ',' on col os "): " os s olf exit 1 }
kdiag(k K s S) none = { osn k.p k.n olf diag k.line k.col s }

type_equal(t T u T) nat = {
  t then
  u then
  t.format is c
  (t == u) else
  t.o ? type_equal t.o u
  u.o ? type_equal t u.o
  { (c == u.format) then
    (c == &ftnone ) else
    (c == &ftbyte ) else
    (c == &ftnat  ) else
    (c == &ftptr  ) ? type_equal t.a u.a
      { (c == &ftfunc ) then
        u.a is p
        t.a is q
        { 1 for _
          p then
          q then
          type_equal p q then
          (p = p.s)
          (q = q.s)
          1 }
        (p == q) } }
}

ntype(size N align N format @ftfn) T = {
  cast T malloc sizeof Type is t
  (t.size  = size  )
  (t.align = align )
  (t.format = format)
  (t.s = 0)
  t
}

ntypea(size N align N format @ftfn a T) T = {
  ntype size align format is t
  (t.a = a)
  t
}

nnone (   ) T = ntype  0 0 &ftnone
nbyte (   ) T = ntype  1 1 &ftbyte
nnat  (   ) T = ntype  8 8 &ftnat
nstct (   ) T = ntype  0 1 &ftstct
nptr  (a T) T = ntypea 8 8 &ftptr  a
nfunc (a T) T = ntypea 1 1 &ftfunc a

tree(k K t T gen @necl) E = {
  cast E malloc sizeof Node is e
  (e.k = k)
  (e.t = t)
  (e.gen = gen)
  e
}

t0  (k K t T gen @necl            ) E = {tree k t gen}
t1  (k K t T gen @necl         a E) E = {tree k t gen is e e ret (e.a = a)}
t2  (k K t T gen @necl     b E a E) E = {tree k t gen is e e ret (e.a = a)  (e.a.s = b)}
t3  (k K t T gen @necl c E b E a E) E = {tree k t gen is e e ret (e.a = a)  (e.a.s = b)  (e.a.s.s = c)}
tt  (k K t T gen @necl u T        ) E = {t0   k t gen is e e ret (e.u = u)}
tl  (k K t T gen @necl l N        ) E = {t0   k t gen is e e ret (e.l = l)}

ntoken(q TokenKind a S b S line N col N) K = {
  cast K malloc sizeof Token is k
  (k.s    = 0    )
  (k.q    = q    )
  (k.p    = a    )
  (k.n    = b - a)
  (k.line = line )
  (k.col  = col  )
  k
}

read_file() S = {
  (1 << 20) is big
  cast @byte malloc big is buf
  read buf big is n
  (buf^n = '\0')
  buf
}

try_search_scope(x X c S n N) @Scope = {
  cast @Scope 0 is r
  { !!x.s then
    x.s for s
    (n != s.k.n or !strncmp2 s.k.p c n) ?
      s.s
      { (r = s)
        cast @Scope 0 } }
  r
}

search_scope(x X c S n N) @Scope = {
  try_search_scope x c n else
  kdiag x.k "lookup failed"
}

jadv   (x X    ) K    = { x.k ret (x.k = x.k.s) }
jeq    (x X c S) nat  = { x.k then memcmp2 x.k.p c x.k.n then !c^x.k.n }
expect (x X c S) none = { { !jeq x c then kdiag x.k "unexpected" } jadv x }
consume(x X c S) nat  = { jeq x c is r { r then jadv x } r }

declarator (x X t @T) none = {
  (t@ = cast T malloc sizeof Type)
  jadv x is k
  ptype x is u
  (t@@ = u@)
  (t.o = u)
  (t.name = k)
}

struct_decl tx = {
  nstct is t
  &t.a is u
  { 1 for _ 
     !consume x "}" then
      declarator x u
      (u = &u.s) }
  0 is bits
  { !!t.a then
    t.a for g
    (bits = align bits (g.align * 8))
    (g.offset = bits / 8)
    (bits = bits + g.size * 8)
    {(t.align < g.align) then (t.align = g.align)}
    g.s }
  (t.size = align bits (t.align * 8) / 8)
  t
}

func_params tx = {
  cast T 0 is params
  &params is u
  { 1 for _
    !jeq x ")" then
    !jeq x "}" then
    declarator x u
    (u = &u.s)
    1 }
  jadv x
  nfunc ptype x is t
  (t.params = params)
  t
}

ptype tx = {
  consume x "none"   ? nnone
  consume x "byte"   ? nbyte
  consume x "nat"    ? nnat
  consume x "@"      ? nptr        ptype x
  consume x "("      ? func_params       x
  consume x "{"      ? struct_decl       x
  { search_scope x x.k.p x.k.n is s
    (s.is_type or kdiag x.k "not a type")
    jadv x
    s.t }
}

pj(x X     q TokenKind e @exk ) E = {x.k then (x.k.q == q) then jadv x is k e@ x k}
pl(x X     c S         e @exk ) E = {x.k then jeq x c then jadv x is k e@ x k  }
pr(x X a E c S         e @exka) E = {x.k then jeq x c then jadv x is k e@ x k a}
pu(x X a E c S         e @exka) E = {x.k then consume x c ? a e@ x x.k a}

pa1    ex  = { pj    x   &JID   &eid   else
               pj    x   &JSTR  &estr  else
               pj    x   &JNUM  &enat  else
               pj    x   &JCHR  &ebyte      }
pa3    exa = { (a.t.format == &ftfunc) then ecall x x.k a }
pa4    exa = { pr    x a "?"    &econd      }
pa5    exa = { pr    x a "ret"  &eret  else
               pr    x a "is"   &eis   else
               pr    x a "for"  &efor  else
               pr    x a "then" &ethen else
               pr    x a "else" &eelse else
               pu    x a "}"    &eseq       }
pamul  exa = { pr    x a "*"    &emul  else
               pr    x a "/"    &ediv  else
               pr    x a "%"    &emod       }
paadd  exa = { pr    x a "+"    &eadd  else
               pr    x a "-"    &esub       }
pash   exa = { pr    x a "<<"   &eshl  else
               pr    x a ">>"   &eshr       }
pacmp  exa = { pr    x a "<"    &eb    else
               pr    x a ">"    &ea    else
               pr    x a "<="   &ebe   else
               pr    x a ">="   &eae   else
               pr    x a "=="   &ee    else
               pr    x a "!="   &ene        }
paland exa = { pr    x a "and"  &eland      }
palor  exa = { pr    x a "or"   &elor       }
pa7    exa = { pr    x a "as"   &eas        }

p2 ex = {
  pl x "&"       &eaddr    else
  pl x "-"       &eneg     else
  pl x "!"       &elnot    else
  pl x "not"     &elnot    else
  pl x "cast"    &ecast    else
  pl x "sizeof"  &esize    else
  pl x "exit"    &eexit    else
  pl x "read"    &eread    else
  pl x "write"   &ewrite   else
  pl x "err"     &eerr     else
  { consume x "(" ?
      { { p7    x for a
          pr    x a "=" &eass else
          pa7   x a
        } ret
        expect x ")"                     }
    pl  x "{"  &ebrace else
    pa1 x else
    kdiag x.k "expected an expression"
  } for a
  pr    x     a "^"       &eelem   else
  pr    x     a "."       &emem   else
  pr    x     a "@"       &ederef
}

p3    ex = { p2    x for a pa3    x a }
p4    ex = { p3    x for a pa4    x a }
p5    ex = { pl    x "scratch" &escratch else
             p4    x is  a pa5    x a }
pmul  ex = { p4    x for a pamul  x a }
padd  ex = { pmul  x for a paadd  x a }
psh   ex = { padd  x for a pash   x a }
pcmp  ex = { psh   x for a pacmp  x a }
pland ex = { pcmp  x for a paland x a }
plor  ex = { pland x for a palor  x a }
p7    ex = { plor  x for a pa7    x a }

typedecl(x X) none
function(x X) none

decls(x X) none = {
  x.k then
  (consume x "type" ? &typedecl &function)@ x
}

typedecl(x X) none = {
  consume x ";" ?
    decls x
    { x.s is s
      scratch Scope sc
      (x.s = &sc)
      (sc.s = s)
      (sc.k = x.k)
      (sc.is_type = 1)
      declarator x &sc.t
      typedecl x
      (x.s = s) }
}

argreg1(d N) S = {
  (d == 0) ? "dil"
  (d == 1) ? "sil"
  (d == 2) ? "dl"
  (d == 3) ? "cl"
  (d == 4) ? "r8b"
             "r9b"
}

argreg8(d N) S = {
  (d == 0) ? "rdi"
  (d == 1) ? "rsi"
  (d == 2) ? "rdx"
  (d == 3) ? "rcx"
  (d == 4) ? "r8"
             "r9"
}

gtreg(s S        ) none = { gc '%' gs s }
gt0  (s S        ) none = { gs s glf  }
gt1  (s S a S    ) none = { gs s gc ' ' gtreg a glf }
gt2  (s S a S b S) none = { gs s gc ' ' gtreg a gc ',' gtreg b glf }

gtz (a S) none = gt2  "xor"  a a
gtcz(a S) none = gt2  "test" a a

gtlit(l N a S) none = (!!l ? { gs "mov $" gn l gc ',' gtreg a glf } gtz  a)

gtnot(    a S) none = gt1 "not" a
gtneg(    a S) none = gt1 "neg" a
gmul (    a S) none = gt1 "mul" a
gdiv (       ) none = { gtz "edx" gt1 "div" "rdi" }
gmod (       ) none = { gdiv
                        gt2 "mov" "rdx" "rax" }
gshx (x C    ) none = { gt2 "mov" "dil" "cl" gs "sh" gc x gs " %cl,%rax" glf }

gadd (a S b S) none = gt2 "add" a b
gsub (a S b S) none = gt2 "sub" a b
gand (a S b S) none = gt2 "and" a b
gor  (a S b S) none = gt2 "or"  a b
gxor (a S b S) none = gt2 "xor" a b
gcmp (a S b S) none = gt2 "cmp" a b
gshr () none = gshx 'r'
gshl () none = gshx 'l'

gpromote(b S) none = (gt2 "movzbl" "al" b)

gsetf     (s S     b S    ) none = { gs "set" gs s gc ' ' gtreg "al" glf gpromote b }
gcmp_setf (s S a S b S c S) none = { gcmp a b gsetf s c }
gcmpz_setf(s S a S b S    ) none = { gtcz a   gsetf s b }
glnot     (    a S b S    ) none = { gcmpz_setf "e" a b }

gj        (e E l S    ) none = { gs "jmp " gs l gn cast nat e gc '$' glf }
gjc       (e E l S s S) none = { gs "j" gs s gc ' ' gs l gn cast nat e gc '$' glf }
glabel    (e E l S    ) none = { gs l gn cast nat e gs "$:" glf }

gje  (e E l S) none = gjc e l "e"
gjne (e E l S) none = gjc e l "ne"
gjb  (e E l S) none = gjc e l "b"
gjbe (e E l S) none = gjc e l "be"
gja  (e E l S) none = gjc e l "a"
gjae (e E l S) none = gjc e l "ae"

gegcmp(s S) none = gcmp_setf s "rdi" "rax" "eax"

ge  () none = gegcmp "e"
gne () none = gegcmp "ne"
gb  () none = gegcmp "b"
gbe () none = gegcmp "be"
ga  () none = gegcmp "a"
gae () none = gegcmp "ae"

gcast(a T b T) none = (
  (b.format == &ftnone) ?  gtz     "eax"
  { (b.format == &ftbyte) then
    gpromote  "eax" }
)

gfpush(c @N  l N ) none = { !!l then gs "sub $" gn (l << 3) gc ',' gtreg "rsp" glf (c@ = c@ + l) }
gfpop (c @N  l N ) none = { !!l then gs "add $" gn (l << 3) gc ',' gtreg "rsp" glf (c@ = c@ - l) }
gpush (c @N  d S ) none = { gt1 "push" d (c@ = c@ + 1) }
gpop  (c @N  s S ) none = { gt1 "pop"  s (c@ = c@ - 1) }

gindex(      l N ) none = { !!l then gs  "add $" gn  l gc  ',' gtreg  "rax" glf  }

gaddr(q @ftfn n N s S d S) none = {(!strcmp2 s d or n) then gs  "lea " gn  n gs  "(%r" gs  s gs  "),%r" gs  d glf }
gload(q @ftfn n N s S d S) none = (
  (q == &ftstct or q == &ftfunc) ?
    gaddr  q n s d 
  (q == &ftbyte) ?
    {gs  "movzbl " gn  n gs  "(%r" gs  s gs  "),%e" gs  d glf }
  {gs  "mov " gn  n gs  "(%r" gs  s gs  "),%r" gs  d glf }
)

gaddrg(e E c @N d S) none = { gs "mov " gsn e.t.name.p e.t.name.n gs "@GOTPCREL(%rip),%r" gs d glf }
gaddrl(e E c @N d S) none = { gaddr e.a.u.format (c@ - e.a.sp << 3) "sp" d }
gloadl(e E c @N d S) none = { gload e.a.u.format (c@ - e.a.sp << 3) "sp" d }

gloadsp(t T d S) none = (
  (t.format == &ftstct) ?
    { gs "mov %rsp,%" gs d glf }
  (t.format == &ftbyte) ?
    { gs "movzbq (%rsp), %" gs d glf }
    { gs "mov (%rsp),%" gs d glf }
)

gstoresp(t T) none = {
  (t.format == &ftstct) ?
    { 0 for i
      (i < t.size) then
      (i + 1) ret
      gs "mov " gn i gs "(%rax),%r8b" glf
      gs "mov %r8b," gn i gs "(%rsp)" glf }
  (t.format == &ftbyte) ?
    { gs "mov %al,(%rsp)"  glf }
    { gs "mov %rax,(%rsp)" glf }
}

gstore(t T c @N) none = {
  gpop c "rdi"
  (t.format == &ftstct) ?
    { 0 for i
      (i < t.size) then
      (i + 1) ret
      gs "mov " gn i gs "(%rax),%r8b" glf
      gs "mov %r8b," gn i gs "(%rdi)" glf }
  (t.format == &ftbyte) ?
    { gs "mov %al,(%rdi)"  glf }
    { gs "mov %rax,(%rdi)" glf }
}

gexpr necl  = {gc '#' gsn e.k.p e.k.n glf e.gen@ e c l }

gdrop (e E c N    ) none = { cast none gexpr  e c 0 }
geval (e E c N l N) none = {
  gexpr e c l is l1
  !!l1 then
  l1 for l2
  gload ((l2 == 1 and l == 0) ? e.t.format &ftptr) 0 "ax" "ax"
  (l2 - 1)
}

gtpars(x X t T c N g N) N = {
  !t ? { gdrop p4 x c 0 }
    { x.s is s
      scratch Node nd
      scratch Scope sc
      (x.s = &sc)
      (sc.s = s)
      (sc.k = t.name)
      (sc.t = 0)
      (sc.e = &nd)
      (sc.is_type = 0)
      (nd.s   = 0)
      (nd.a   = 0)
      (nd.sp  = -g)
      (nd.u   = t)
      gtpars x t.s c (g + 1) ret
      (x.s = s) }
}
gtparr(x X t T c N g N) N = {
  !t ? { gdrop p4 x c 0 }
    { gpush &c argreg8 g
      x.s is s
      scratch Node nd
      scratch Scope sc
      (x.s = &sc)
      (sc.s = s)
      (sc.k = t.name)
      (sc.t = 0)
      (sc.is_type = 0)
      (sc.e = &nd)
      (nd.s  = 0)
      (nd.a  = 0)
      (nd.sp = c)
      (nd.u  = t)
      (((g == 5) ? &gtpars &gtparr)@ x t.s c (g + 1) + 1) ret
      (x.s = s) }
}
function(x X) none = {
  consume x "export" is globl
  scratch T t
  declarator x &t
  try_search_scope x t.name.p t.name.n is s
  { s then
    (s.is_type and kdiag x.k "redeclared as a different type of symbol")
    (s.is_def >= jeq x "=" and kdiag x.k "remention") }
  x.s is s
  scratch Scope s1
  (x.s = &s1)
  (s1.s = s)
  (s1.k = t.name)
  (s1.t = t)
  (s1.e = 0)
  (s1.is_type = 0)
  (s1.is_def = jeq x "=")
  { s1.is_def then
    jadv x
    gs ".section .text." gsn t.name.p t.name.n glf
    { globl then gs ".globl" gc ' ' gsn t.name.p t.name.n glf }
    gsn t.name.p t.name.n gc ':' glf
    0 is c
    gfpop &c gtparr x t.params c 0
    gt0 "ret" }
  decls x
  (x.s = s)
}

ecall exka = {
  a.t.params is u
  { a for b
    !!u then
    (b.s = p3 x)
    { !type_equal b.s.t u then kdiag x.k "asymmetric argument" }
    (u = u.s)
    b.s }
  t1 x.k a.t.a &gecall a
}
gargs(e E c @N) none = {
  !!e then
  gargs e.s c
  geval e c@ 0
  gpush c "rax"
}
gecall necl  = {
  gargs e.a.s &c
  geval e.a    c 0
  0 is d
  { !!e.a.s then
    e.a.s for e (d < 6) then e.s ret
    gpop &c argreg8 d
    (d = d + 1) }
  gs "call *%rax" glf
  0
}

export main(argc N argv @S) N = {
  gt0 ".data"
  read_file is p
  cast K 0 is k
  1 is line
  1 is col
  &k is x
  { 1 for _
    p@ then
    (p^0 == '/' and p^1 == '*') ? {
      (p = &p^2)
      { 1 for _
        (p@ or diag line col "unclosed block comment")
        (p^0 == '*' and p^1 == '/') ?
          { (p = &p^2) 0 }
          { ((p@ == '\n') ? { (line = line + 1) (col = 1) } (col = col + 1))
            (p = &p^1) 1 } } }
    isws p@ ?
      { ((p@ == '\n') ? { (line = line + 1) (col = 1) } (col = col + 1))
        (p = &p^1) }
    { is09 p@ ? {
        { &p^1 for q isid q@ then (col = col + 1) &q^1 } is q
          (x@ = ntoken &JNUM p q line col)
          (x.l = strtoul x.p &x.p 10)
        (p = q) }
      (p@ == '"') ? {
        { &p^1 for q
          (q^0 or diag line col "unclosed string literal")
          (q^0 == '\n' and diag line col "newline in string literal")
          (q^0 == '\\') ?
          { (q^1 or diag line col "unclosed string literal")
            (q^1 == '\n' and diag line col "newline in string literal")
            (col = col + 2)
            &q^2 }
          { (q^0 != '"') then
            (col = col + 1)
            &q^1 }
        } is end
        ntoken &JSTR p &end^1 line col is k
        gs ".s" gn cast nat k gc ':' gs ".string \""
        { &k.p^1 for i (i < &k.p^(k.n - 1)) then gc i@ &i^1 }
        gc '\"' glf
        (x@ = k)
        (p = &p^x.n) }
      (p@ == '\'') ? {
        (col = col + 1)
        &p^1 is q
        (q@ == '\0' and diag line col "unclosed literal byte")
        (q@ == '\\') ?
          { (col = col + 1)
            (q = &q^1)
            (q@ == '\0' and diag line col "unclosed literal byte")
            (q@ == 'a' ) ?'\a'
              (q@ == 'b' ) ?'\b'
              (q@ == 'f' ) ?'\f'
              (q@ == 'n' ) ?'\n'
              (q@ == 'r' ) ?'\r'
              (q@ == 't' ) ?'\t'
              (q@ == 'v' ) ?'\v'
              (q@ == '\'') ? '\''
              (q@ == '\"') ? '\"'
              (q@ == '\\') ? '\\'
                { '\0' ret
                (q@ != '0' and diag line col "invalid escape sequence") } }
      q@ is l
      (col = col + 1)
      (q = &q^1)
      (q@ != '\'' and diag line col "unclosed byte literal")
      ntoken &JCHR p &q^1 line col is k
      (k.l = cast N l)
      (x@ = k)
      (p = &p^x.n) }
      { 0 is n
        { p for q { { isid q@ then (col = col + 1) &q^1 } else cast S 0 ret (n = q - p as N) } }
        !!n ?
            { (x@ = ntoken &JID p &p^n line col)
              (col = col + n)
              (p = &p^n) }
          { read_punct p is n
            !!n ?
                { (x@ = ntoken &JPCT p &p^n line col)
                  (col = col + n)
                  (p = &p^n) }
                diag line col "invalid token" } }
      (x = &x.s) }
    1 }
  cast @Ctx malloc sizeof Ctx is x
  (x.k = k)
  (x.s = 0)
  decls x
  0
}

ge0     gelfn = {
  gtlit   v "rax"
  0
}

ge1     geefn = {
  geval  e.a c 0
  gop@
  0
}

ge2     geefn = {
  geval  e.a.s  c 0
  gpush        &c "rax"
  geval  e.a    c 0
  gpop         &c "rdi"
  gop@
  0
}

gegneg  gegfn = gtneg  "rax"
geglnot gegfn = glnot  "rax" "eax"
gegadd  gegfn = gadd   "rdi" "rax"
gegsub  gegfn = gsub   "rdi" "rax"
gegmul  gegfn = gmul   "rdi"
gegdiv  gegfn = gdiv
gegmod  gegfn = gmod
gegshr  gegfn = gshr
gegshl  gegfn = gshl
gege    gegfn = ge
gegne   gegfn = gne
gegb    gegfn = gb
gegbe   gegfn = gbe
gega    gegfn = ga
gegae   gegfn = gae

ebrace   exk  = p5 x
eparen   exk  = p7 x

enat     exk   = tl k nnat  &gelit k.l
ebyte    exk   = tl k nbyte &gelit k.l
gelit    necl  = ge0 e.l

esize    exk   = tt k nnat &gesize ptype x
gesize   necl  = ge0 e.u.size

ederef   exka  = t1 k a.t.a &gederef a
gederef  necl  = (gexpr e.a c 0 + 1 - l)

eaddr    exk   = {
  p2 x is a
  t1 k nptr a.t &geaddr a
}
geaddr   necl  = gexpr e.a c 1

eas      exka  = t1 k ptype x &gecast a
ecast    exk   = {
  ptype x is u
  t1 k u &gecast p4 x
}
gecast  necl  = {
  geval  e.a c 0
  gcast  e.a.t e.t
  0
}

estr   exk  = t0 k nptr nbyte &gestr
gestr necl  = {
  gs "mov .s" gn cast nat e.k gs "@GOTPCREL(%rip),%rax" glf
  0
}
eid    exk  = {
  (search_scope x k.p k.n) is s
  (s.is_type and kdiag x.k "not a variable")
  cast E malloc sizeof Node is e
  (e.s   = 0      )
  (e.gen = &geid  )
  (e.k   = k      )
  s.e ? {
    (e.a = s.e    )
    (e.t = s.e.u  )
  }{(e.a = 0      )
    (e.t = s.t    ) }
  e
}
geid   necl  = {
  (e.a ? !l ? &gloadl &gaddrl &gaddrg)@ e &c "ax"
  0
}

elnot exk  = t1 k nnat &gelnot p3    x   gelnot necl  = ge1 e c l &geglnot
eneg  exk  = t1 k nnat &geneg  p3    x   geneg  necl  = ge1 e c l &gegneg
ediv  exka = t2 k nnat &gediv  p4    x a gediv  necl  = ge2 e c l &gegdiv
emod  exka = t2 k nnat &gemod  p4    x a gemod  necl  = ge2 e c l &gegmod
ee    exka = t2 k nnat &gee    psh   x a gee    necl  = ge2 e c l &gege
ene   exka = t2 k nnat &gene   psh   x a gene   necl  = ge2 e c l &gegne
eae   exka = t2 k nnat &geae   psh   x a geae   necl  = ge2 e c l &gegae
ea    exka = t2 k nnat &gea    psh   x a gea    necl  = ge2 e c l &gega
eb    exka = t2 k nnat &geb    psh   x a geb    necl  = ge2 e c l &gegb
ebe   exka = t2 k nnat &gebe   psh   x a gebe   necl  = ge2 e c l &gegbe
eadd  exka = t2 k nnat &geadd  pmul  x a geadd  necl  = ge2 e c l &gegadd
esub  exka = t2 k nnat &gesub  pmul  x a gesub  necl  = ge2 e c l &gegsub
emul  exka = t2 k nnat &gemul  p4    x a gemul  necl  = ge2 e c l &gegmul
eshl  exka = t2 k nnat &geshl  padd  x a geshl  necl  = ge2 e c l &gegshl
eshr  exka = t2 k nnat &geshr  padd  x a geshr  necl  = ge2 e c l &gegshr

eelem  exka = t2 k a.t.a &geelem p3 x a
geelem necl   = {
  geval  e.a    c 0
  gpush        &c "rax"
  geval  e.a.s  c 0
  gpop         &c "rdx"
  gs  "lea (%rdx,%rax," gn  e.a.t.a.size gs  "),%rax" glf 
  (1 - l)
}

emem  exka  = {
  jadv x
  { a.t for t (t.format == &ftptr) then t.a } is t
  (t.format != &ftstct and kdiag x.k "not a struct")
  cast T 0 is g
  { t.a for a
    { (a.name.n == k.s.n) then strncmp2 a.name.p k.s.p k.s.n }
    ? { (g = a) cast T 0 }
      a.s }
  { !g then kdiag x.k "no such member" }
  t1 k.s g &gemem a
}
gemem   necl  = {
  geval  e.a c 0
  { e.a.t for t
    (t.format == &ftptr) then
    t.a ret
    gload  t.a.format 0 "ax" "ax" }
  gindex  e.t.offset
  (1 - l)
}

eseq   exka  = {
  p5 x is b
  t2 k b.t &geseq b a
}
geseq  necl  = {
  gdrop  e.a   c
  geval  e.a.s c l
  0
}

eret  exka  = t2 k a.t &geret p5 x a
geret necl  = {
  geval  e.a    c l
  gpush        &c "rax"
  gdrop  e.a.s  c
  gpop         &c "rax"
  0
}

econd  exka = {
  p4 x is b
  t3 k b.t &gecond p4 x b a
}
gecond necl   = {
  geval   e.a     c 0
  gtcz              "eax"
  gje     e         "a"
  geval   e.a.s   c l
  gj      e         "b"
  glabel  e         "a"
  geval   e.a.s.s c l
  glabel  e         "b"
  0
}

ethen  exka  = {
  p5 x is b
  t2 k b.t &geland b a
}
eland  exka  = {
  pcmp x is b
  t2 k b.t &geland b a
}
geland necl  = {
  (e.a.s.t.format == &ftnone) is keep
  geval  e.a c 0
  gtcz              "eax"
  gje    e          "a"
  { keep then
    gpush        &c "rax" }
  geval  e.a.s c 0
  { keep then
    gpop         &c "rax" }
  glabel  e         "a"
  0
}

eelse  exka  = t2 k a.t &gelor p5    x a
elor   exka  = t2 k a.t &gelor pland x a
gelor  necl  = {
  (e.a.s.t.format == &ftnone) is keep
  geval    e.a   c  0
  gtcz              "eax"
  gjne     e        "a"
  { keep then
    gpush        &c "rax" }
  geval    e.a.s  c 0
  { keep then
    gpop         &c "rax" }
  glabel   e        "a"
  0
}

escratch  exk   = {
  cast E malloc sizeof Node is e
  ptype x is u
  x.s is s
  scratch Scope sc
  (x.s   = &sc       )
  (sc.s  = s         )
  (sc.k  = x.k       )
  (sc.t  = 0         )
  (sc.e  = e         )
  (sc.is_type = 0    )
  jadv x
  (e.s   = 0         )
  (e.gen = &gescratch)
  (e.k   = k         )
  (e.u   = u         )
  (e.a   = p5 x      )
  (e.t   = e.a.t     )
  (x.s   = s         )
  e
}
gescratch necl  = {
  (e.u.size + 7 << 3) is stack
  gfpush    &c stack
  (e.sp = c)
  geval e.a  c l
  gfpop     &c stack
  0
}

eis    exka = {
  cast E malloc sizeof Node is e
  x.s is s
  scratch Scope sc
  (x.s   = &sc    )
  (sc.s  = s      )
  (sc.k  = x.k    )
  (sc.t  = 0      )
  (sc.e  = e      )
  (sc.is_type = 0 )
  jadv x
  (e.s   = 0      )
  (e.gen = &geis  )
  (e.k   = k      )
  (e.a   = a      )
  (e.u   = a.t    )
  (e.a.s = p5 x   )
  (e.t   = e.a.s.t)
  (x.s   = s      )
  e
}
geis   necl = {
  (e.u.size + 7 << 3) is stack
  geval    e.a    c 0
  gfpush         &c stack
  (e.sp  = c)
  gstoresp e.u
  geval    e.a.s  c l
  gfpop          &c stack
  0
}

efor   exka = {
  cast E malloc sizeof Node is e
  x.s is s
  scratch Scope sc
  (x.s   = &sc    )
  (sc.s  = s      )
  (sc.k  = x.k    )
  (sc.t  = 0      )
  (sc.e  = e      )
  (sc.is_type = 0 )
  jadv x
  (e.s   = 0      )
  (e.gen = &gefor )
  (e.k   = k      )
  (e.a   = a      )
  (e.u   = a.t    )
  (e.a.s = p5 x   )
  (e.t   = e.a.s.t)
  (x.s   = s      )
  e
}
gefor  necl = {
  (e.u.size + 7 << 3) is stack
  geval     e.a    c 0
  gfpush          &c stack
  (e.sp = c)
  gstoresp  e.u
  gj        e        "b"
  glabel    e        "a"
  gstoresp  e.u
  glabel    e        "b"
  geval     e.a.s  c 0
  gtcz               "eax"
  gjne      e        "a"
  gloadsp   e.u      "rax"
  gfpop           &c stack
  0
}

eass   exka  = t2 k nnone &geass p7 x a
geass  necl  = {
  geval   e.a    c 1
  gpush         &c "rax"
  geval   e.a.s  c 0
  gstore  e.a.t &c
  gtz              "eax"
  0
}

eexit  exk  = t1 k nnone &geexit p3 x
geexit necl = {
  geval e.a c 0
  gt2 "mov" "rax" "rdi"
  gtlit 60 "rax"
  gt0 "syscall"
}

gegsys3 (n N a0 N e E c N) none = {
  geval e.a    c 0
  gpush       &c "rax"
  geval e.a.s  c 0
  gpop        &c "rsi"
  gt2 "mov" "rax" "rdx"
  gtlit a0 "rdi"
  gtlit n "rax"
  gt0 "syscall"
  0
}

eread   exk  = t2 k nnone &geread p3 x p3 x
geread  necl = gegsys3 0 0 e c

ewrite  exk  = t2 k nnone &gewrite p3 x p3 x
gewrite necl = gegsys3 1 1 e c

eerr    exk  = t2 k nnone &geerr p3 x p3 x
geerr   necl = gegsys3 1 2 e c

ftnone ftfn = 0
ftbyte ftfn = 0
ftnat  ftfn = 0
ftstct ftfn = 0
ftfunc ftfn = 0
ftptr  ftfn = 0
