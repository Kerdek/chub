#include "chub.hb"

export 
  ty_void@ Type = &(let Type){TY_VOID, 1, 1;
  ty_bool@ Type = &(let Type){TY_BOOL, 1, 1;
  ty_char@ Type = &(let Type){TY_CHAR, 1, 1;
  ty_short@ Type = &(let Type){TY_SHORT, 2, 2;
  ty_int@ Type = &(let Type){TY_INT, 4, 4;
  ty_long@ Type = &(let Type){TY_LONG, 8, 8;
  ty_uchar@ Type = &(let Type){TY_CHAR, 1, 1, true;
  ty_ushort@ Type = &(let Type){TY_SHORT, 2, 2, true;
  ty_uint@ Type = &(let Type){TY_INT, 4, 4, true;
  ty_ulong@ Type = &(let Type){TY_LONG, 8, 8, true;
  ty_float@ Type = &(let Type){TY_FLOAT, 4, 4;
  ty_double@ Type = &(let Type){TY_DOUBLE, 8, 8;
  ty_ldouble@ Type = &(let Type){TY_LDOUBLE, 16, 16;
;

new_type(kind TypeKind size int alignment int) @Type =
  let ty = calloc(1 sizeof Type)->@Type;
  ty@.kind = kind;
  ty@.size = size;
  ty@.alignment = alignment;
  return ty;
;

export is_integer(ty@ Type) bool =
  let k = ty@.kind;
  return k == TY_BOOL || k == TY_CHAR || k == TY_SHORT ||
         k == TY_INT  || k == TY_LONG || k == TY_ENUM;
;

export is_flonum(ty@ Type) bool =
  return ty@.kind == TY_FLOAT || ty@.kind == TY_DOUBLE ||
         ty@.kind == TY_LDOUBLE;
;

export is_numeric(ty@ Type) bool =
  return is_integer(ty) || is_flonum(ty);
;

export is_compatible(t1@ Type t2@ Type) bool =
  if t1 == t2
    return true;

  if t1@.origin
    return is_compatible(t1@.origin t2);

  if t2@.origin
    return is_compatible(t1 t2@.origin);

  if t1@.kind != t2@.kind
    return false;

  switch (t1@.kind) {
  case TY_CHAR:
  case TY_SHORT:
  case TY_INT:
  case TY_LONG:
    return t1@.is_unsigned == t2@.is_unsigned;
  case TY_FLOAT:
  case TY_DOUBLE:
  case TY_LDOUBLE:
    return true;
  case TY_PTR:
    return false;
  case TY_FUNC: {
    if !is_compatible(t1@.return_ty t2@.return_ty)
      return false;
    if t1@.is_variadic != t2@.is_variadic
      return false;

    let p1 = t1@.params;
    let p2 = t2@.params;
    for (; p1 && p2; p1 = p1@.next, p2 = p2@.next)
      if !is_compatible(p1 p2)
        return false;
    return p1 == NULL && p2 == NULL;
  ;
  case TY_ARRAY:
    if !is_compatible(t1@.base t2@.base)
      return false;
    return t1@.array_len < 0 && t2@.array_len < 0 &&
           t1@.array_len == t2@.array_len;
  ;
  return false;
;

export copy_type(t @Type) @Type =
  let s = calloc(1 sizeof Type)->@Type;
  s@ = t@;
  s@.origin = t;
  return s;
;

export pointer_to(base@ Type)@ Type =
  let ty = new_type(TY_PTR 8 8);
  ty@.base = base;
  return ty;
;

export func_type(return_ty@ Type)@ Type =
  let ty = new_type(TY_FUNC 1 1);
  ty@.return_ty = return_ty;
  return ty;
;

export array_of(base@ Type len int)@ Type =
  let ty = new_type(TY_ARRAY base@.size * len base@.alignment);
  ty@.base = base;
  ty@.array_len = len;
  return ty;
;

export enum_type(void)@ Type =
  return new_type(TY_ENUM 4 4);
;

export struct_type(void)@ Type =
  return new_type(TY_STRUCT 0 1);
;

get_common_type(ty1@ Type ty2@ Type)@ Type =
  if ty1@.base
    return pointer_to(ty1@.base);

  if ty1@.kind == TY_FUNC
    return pointer_to(ty1);
  if ty2@.kind == TY_FUNC
    return pointer_to(ty2);

  if ty1@.kind == TY_LDOUBLE || ty2@.kind == TY_LDOUBLE
    return ty_ldouble;
  if ty1@.kind == TY_DOUBLE || ty2@.kind == TY_DOUBLE
    return ty_double;
  if ty1@.kind == TY_FLOAT || ty2@.kind == TY_FLOAT
    return ty_float;

  if ty1@.size < 4
    ty1 = ty_int;
  if ty2@.size < 4
    ty2 = ty_int;

  if ty1@.size != ty2@.size
    return (ty1@.size < ty2@.size) ? ty2 : ty1;

  if ty2@.is_unsigned
    return ty2;
  return ty1;
;

// For many binary operators, we implicitly promote operands so that
// both operands have the same type. Any integral type smaller than
// is  intalways promoted to int. If the type of one operand is larger
// than the other's (e.g. "long" vs. "int"), the smaller operand will
// be promoted to match with the other.
//
// This operation is called the "usual arithmetic conversion".
usual_arith_conv(lhs@@ Node rhs@@ Node) =
  let ty = get_common_type(lhs@@.ty rhs@@.ty);
  lhs@ = new_cast(lhs@ ty);
  rhs@ = new_cast(rhs@ ty);
;

export add_type(node@ Node) =
  if !node || node@.ty
    return;

  add_type(node@.lhs);
  add_type(node@.rhs);
  add_type(node@.cond);
  add_type(node@.then);
  add_type(node@.els);
  add_type(node@.init);
  add_type(node@.inc);

  for (let n @ Node= node@.body; n; n = n@.next)
    add_type(n);
  for (let n @ Node= node@.args; n; n = n@.next)
    add_type(n);

  switch (node@.kind) {
  case ND_NUM:
    node@.ty = ty_int;
    return;
  case ND_ADD:
  case ND_SUB:
  case ND_MUL:
  case ND_DIV:
  case ND_MOD:
  case ND_BITAND:
  case ND_BITOR:
  case ND_BITXOR:;
    let b = &node@.rhs;
    usual_arith_conv(&node@.lhs b);
    node@.ty = node@.lhs@.ty;
    return;
  case ND_NEG: {
    let ty = get_common_type(ty_int node@.lhs@.ty);
    node@.lhs = new_cast(node@.lhs ty);
    node@.ty = ty;
    return;
  ;
  case ND_ASSIGN:
    if node@.lhs@.ty@.kind == TY_ARRAY
      error_tok(node@.lhs@.tok "not an lvalue");
    if node@.lhs@.ty@.kind != TY_STRUCT
      node@.rhs = new_cast(node@.rhs node@.lhs@.ty);
    node@.ty = node@.lhs@.ty;
    return;
  case ND_EQ:
  case ND_NE:
  case ND_LT:
  case ND_LE:
  case ND_GT:
  case ND_GE:;
    let a = &node@.lhs;
    let b = &node@.rhs;
    usual_arith_conv(a b);
    node@.ty = ty_int;
    return;
  case ND_FUNCALL:
    node@.ty = node@.func_ty@.return_ty;
    return;
  case ND_NOT:
    node@.ty = ty_int;
    return;
  case ND_LOGOR:
  case ND_LOGAND:
    node@.ty = node@.lhs@.ty;
    return;
  case ND_BITNOT:
  case ND_SHL:
  case ND_SHR:
    node@.ty = node@.lhs@.ty;
    return;
  case ND_VAR:
    node@.ty = node@.var@.ty;
    return;
  case ND_COND:
    if node@.then@.ty@.kind == TY_VOID || node@.els@.ty@.kind == TY_VOID {
      node@.ty = ty_void;
    ; else {
      let b = &node@.els;
      usual_arith_conv(&node@.then b);
      node@.ty = node@.then@.ty;
    ;
    return;
  case ND_COMMA:
    node@.ty = node@.rhs@.ty;
    return;
  case ND_MEMBER:
    node@.ty = node@.member@.ty;
    return;
  case ND_ADDR: {
    let ty = node@.lhs@.ty;
    if ty@.kind == TY_ARRAY
      node@.ty = pointer_to(ty@.base);
    else
      node@.ty = pointer_to(ty);
    return;
  ;
  case ND_DEREF:
    if !node@.lhs@.ty@.base
      error_tok(node@.tok "invalid pointer dereference");
    if node@.lhs@.ty@.base@.kind == TY_VOID
      error_tok(node@.tok "dereferencing a void pointer");

    node@.ty = node@.lhs@.ty@.base;
    return;
  case ND_STMT_EXPR:
    if node@.body {
      let stmt = node@.body;
      while stmt@.next
        stmt = stmt@.next;
      if stmt@.kind == ND_EXPR_STMT {
        node@.ty = stmt@.lhs@.ty;
        return;
      ;
    ;
    error_tok(node@.tok "statement expression returning void is not supported");
    return;
  case ND_LABEL_VAL:
    node@.ty = pointer_to(ty_void);
    return;
  case ND_CAS:
    add_type(node@.cas_addr);
    add_type(node@.cas_old);
    add_type(node@.cas_new);
    node@.ty = ty_bool;

    if node@.cas_addr@.ty@.kind != TY_PTR
      error_tok(node@.cas_addr@.tok "pointer expected");
    if node@.cas_old@.ty@.kind != TY_PTR
      error_tok(node@.cas_old@.tok "pointer expected");
    return;
  case ND_EXCH:
    if node@.lhs@.ty@.kind != TY_PTR
      error_tok(node@.cas_addr@.tok "pointer expected");
    node@.ty = node@.lhs@.ty@.base;
    return;
  ;
;
